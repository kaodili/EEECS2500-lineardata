package weightedinterval;

//Written By: Kaodili Okwuaka

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class WeightedInterval {
    static ArrayList<inputData> inputs = new ArrayList<>();
    static ArrayList<Integer> jobNumber = new ArrayList<>();
    static int numOfJobs, index;
    static int[] m, p;

    public static void main(String[] args) throws FileNotFoundException {
        File fileName = new File("interval.txt");
        Scanner stdin = new Scanner(fileName);
        int count = 0;

        inputs.add(new inputData(0, 0, 0));
        while (stdin.hasNextInt()) {
            int startTime = stdin.nextInt();
            int finishTime = stdin.nextInt();
            int weight = stdin.nextInt();
            inputs.add(new inputData(startTime, finishTime, weight));
            count++;
        }
        numOfJobs = count + 1;

        p = new int[numOfJobs];
        Arrays.fill(p, -1);
        m = new int[numOfJobs];
        Arrays.fill(m, -1);

        m_compute_opt(numOfJobs - 1, inputs, p);
        System.out.println("Optimum profit: " +m[numOfJobs - 1]);
        
        find_Solution(numOfJobs - 1, inputs, p);
        System.out.print("Using Jobs: ");
        for (int i = jobNumber.size()-1; i >= 0; i--) {
            System.out.print(jobNumber.get(i)+ " ");    
        }
        System.out.println();
    }

    public static int indexOfCompJobs(int size) {
        for (int i = 0; i < inputs.size(); i++) {
            for (int j = 0; j < i; j++) {
                if (inputs.get(i).startTime >= inputs.get(j).finishTime) {
                    p[i] = j;
                }
            }
        }
        return p[size];
    }

    public static int m_compute_opt(int j, ArrayList<inputData> inputs, 
                                    int[] p) {
        int compJob;

        if (j == -1) {
            return 0;
        } else {
            compJob = indexOfCompJobs(j);
        }
        m[j] = Math.max(inputs.get(j).weight + m_compute_opt
                (compJob, inputs, p), m_compute_opt(j - 1, inputs, p));
        return m[j];
    }

    public static void find_Solution(int j, ArrayList<inputData> inputs, 
                                     int[] p) {
        int compJob;
        compJob = indexOfCompJobs(j);
        
        if (compJob == -1) {
        } else if (inputs.get(j).weight + m[compJob] > m[j - 1]) {
            jobNumber.add(j);
            find_Solution(compJob, inputs, p);
        } else {
            find_Solution(j - 1, inputs, p);
        }
    }
}

class inputData {
    int startTime, finishTime, weight;

    public inputData(int startTime, int finishTime, int weight) {
        this.startTime = startTime;
        this.finishTime = finishTime;
        this.weight = weight;
    }
}
