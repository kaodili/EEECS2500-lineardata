
public class Queue {

    protected Customer[] queue;              
    protected int numElements = 0;   
    protected int front = 0;          
    protected int rear;   

    public Queue(int maxSize) {
        queue = new Customer[maxSize];
        rear = maxSize - 1;
    }

    public void enqueue(Customer element) throws QueueOverflowException {
    // Throws QueueOverflowException if this queue is full,
    // otherwise adds element to the rear of this queue.
    
        if (isFull()) {
            throw new QueueOverflowException(""
                    + "Enqueue attempted on a full queue.");
        } else {
            rear = (rear + 1) % queue.length;
            queue[rear] = element;
            numElements = numElements + 1;
        }
    }

    public Customer dequeue() throws QueueUnderflowException {
    // Throws QueueUnderflowException if this queue is empty,
    // otherwise removes front element from this queue and returns it.
    
        if (isEmpty()) {
            throw new QueueUnderflowException("Dequeue "
                    + "attempted on empty queue.");
        } else {
            Customer toReturn = queue[front];
            queue[front] = null;
            front = (front + 1) % queue.length;
            numElements = numElements - 1;
            return toReturn;
        }
    }

    public boolean isEmpty() {
        return (numElements == 0);
    }

    public boolean isFull() {
        return (numElements == queue.length);
    }
}
